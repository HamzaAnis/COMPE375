
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000118  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001fb  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000174  00000000  00000000  0000043f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057f  00000000  00000000  000005b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000fffe  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ee  00000000  00000000  00010ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00010c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000064e  00000000  00000000  00010cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	21 d0       	rcall	.+66     	; 0xce <main>
  8c:	43 c0       	rjmp	.+134    	; 0x114 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <USART_Init>:
void USART_Transmit(unsigned char REDID);

void USART_Init( unsigned int ubrr)
{
	/*baud rate*/
	UBRR0H = (uint8_t)(ubrr>>8);
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)ubrr;
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/*receiver and transmitter*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/*frame format: 8data, 2stop bit*/
	UCSR0C = (3<<UCSZ00);
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  a4:	08 95       	ret

000000a6 <USART_Transmit>:

void USART_Transmit(unsigned char REDID)
{
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <USART_Transmit+0x4>
	
	UDR0 = REDID;                                   //This returns the char to the string
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret

000000b6 <USART_Receive>:
}



void USART_Receive(unsigned char *REDID)
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
	for(*REDID = 1; *REDID != 0x00; REDID++) //This calls the USTART_Transmit and recieves it byte by byte
  ba:	ec 01       	movw	r28, r24
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	89 93       	st	Y+, r24
	{
		USART_Transmit(*REDID);
  c0:	f2 df       	rcall	.-28     	; 0xa6 <USART_Transmit>



void USART_Receive(unsigned char *REDID)
{
	for(*REDID = 1; *REDID != 0x00; REDID++) //This calls the USTART_Transmit and recieves it byte by byte
  c2:	89 91       	ld	r24, Y+
  c4:	81 11       	cpse	r24, r1
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <USART_Receive+0xa>
	{
		USART_Transmit(*REDID);
	}
}
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <main>:
	UCSR0C = (3<<UCSZ00);
	
}

int main(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	2d 97       	sbiw	r28, 0x0d	; 13
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
	char REDID[] = " 816906487\r\n";  //816906487 is my ID number and will put it into the array
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	e0 e0       	ldi	r30, 0x00	; 0
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	de 01       	movw	r26, r28
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	01 90       	ld	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	8a 95       	dec	r24
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x1e>
	USART_Init(MYUBRR);
  f4:	87 e6       	ldi	r24, 0x67	; 103
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	cb df       	rcall	.-106    	; 0x90 <USART_Init>
	while(1)                          //this will continuously loop the array in putty
	{
		USART_Receive(REDID);        //this function calls the USTART receiver
  fa:	ce 01       	movw	r24, r28
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	db df       	rcall	.-74     	; 0xb6 <USART_Receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f e9       	ldi	r18, 0x9F	; 159
 102:	86 e8       	ldi	r24, 0x86	; 134
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x38>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x42>
 110:	00 00       	nop
 112:	f3 cf       	rjmp	.-26     	; 0xfa <main+0x2c>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
