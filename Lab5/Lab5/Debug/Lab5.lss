
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001eb  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014f  00000000  00000000  0000051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f3  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ffed  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000127  00000000  00000000  00010dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00010ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000064e  00000000  00000000  00010f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	c2 d0       	rcall	.+388    	; 0x1fa <main>
  76:	db c0       	rjmp	.+438    	; 0x22e <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <scan_keypad>:
char scan_keypad();
void USART_Init(unsigned int ubrr);
void USART_Transmit(unsigned char ch);

char scan_keypad()
{
  7a:	ff 92       	push	r15
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
	
	for (int col = 4; col < 8; col++)
  84:	64 e0       	ldi	r22, 0x04	; 4
  86:	70 e0       	ldi	r23, 0x00	; 0
	{
		PORTD |= 0xFF;		//reset
  88:	ff 24       	eor	r15, r15
  8a:	fa 94       	dec	r15
		PORTD &= ~(1<<col);		//sets specific PORTD/PIN(col) to 0 and everything else 1.
  8c:	c1 e0       	ldi	r28, 0x01	; 1
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	00 e0       	ldi	r16, 0x00	; 0
  92:	10 e0       	ldi	r17, 0x00	; 0
char scan_keypad()
{
	
	for (int col = 4; col < 8; col++)
	{
		PORTD |= 0xFF;		//reset
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	fb b8       	out	0x0b, r15	; 11
		PORTD &= ~(1<<col);		//sets specific PORTD/PIN(col) to 0 and everything else 1.
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	de 01       	movw	r26, r28
  9c:	06 2e       	mov	r0, r22
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <scan_keypad+0x2a>
  a0:	aa 0f       	add	r26, r26
  a2:	bb 1f       	adc	r27, r27
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <scan_keypad+0x26>
  a8:	9a 2f       	mov	r25, r26
  aa:	90 95       	com	r25
  ac:	89 23       	and	r24, r25
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	ae 01       	movw	r20, r28
  b2:	20 2f       	mov	r18, r16
  b4:	31 2f       	mov	r19, r17
  b6:	04 c0       	rjmp	.+8      	; 0xc0 <scan_keypad+0x46>
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	4f 5f       	subi	r20, 0xFF	; 255
  be:	5f 4f       	sbci	r21, 0xFF	; 255
  c0:	f9 01       	movw	r30, r18
		for (int row = 0; row < 4; row++) 
		{
			PORTB |= 0x0F;		//reset
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8f 60       	ori	r24, 0x0F	; 15
  c6:	85 b9       	out	0x05, r24	; 5
			if (!(PINB & (1<<row)) && !(PIND & (1<<col)))	//checks for 0's for the row and col
  c8:	83 b1       	in	r24, 0x03	; 3
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 2e       	mov	r0, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <scan_keypad+0x5a>
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <scan_keypad+0x56>
  d8:	80 fd       	sbrc	r24, 0
  da:	46 c0       	rjmp	.+140    	; 0x168 <scan_keypad+0xee>
  dc:	89 b1       	in	r24, 0x09	; 9
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	8a 23       	and	r24, r26
  e2:	9b 23       	and	r25, r27
  e4:	89 2b       	or	r24, r25
  e6:	09 f0       	breq	.+2      	; 0xea <scan_keypad+0x70>
  e8:	3f c0       	rjmp	.+126    	; 0x168 <scan_keypad+0xee>
			{
				if (col == 4 && row == 0)
  ea:	64 30       	cpi	r22, 0x04	; 4
  ec:	71 05       	cpc	r23, r1
  ee:	79 f4       	brne	.+30     	; 0x10e <scan_keypad+0x94>
  f0:	ef 2b       	or	r30, r31
  f2:	09 f4       	brne	.+2      	; 0xf6 <scan_keypad+0x7c>
  f4:	44 c0       	rjmp	.+136    	; 0x17e <scan_keypad+0x104>
					return '1';
				else if (col == 4 && row == 1)
  f6:	21 30       	cpi	r18, 0x01	; 1
  f8:	31 05       	cpc	r19, r1
  fa:	09 f4       	brne	.+2      	; 0xfe <scan_keypad+0x84>
  fc:	42 c0       	rjmp	.+132    	; 0x182 <scan_keypad+0x108>
					return '2';
				else if (col == 4 && row == 2)
  fe:	22 30       	cpi	r18, 0x02	; 2
 100:	31 05       	cpc	r19, r1
 102:	09 f4       	brne	.+2      	; 0x106 <scan_keypad+0x8c>
 104:	40 c0       	rjmp	.+128    	; 0x186 <scan_keypad+0x10c>
					return '3';
				else if (col == 4 && row == 3)
 106:	23 30       	cpi	r18, 0x03	; 3
 108:	31 05       	cpc	r19, r1
 10a:	71 f5       	brne	.+92     	; 0x168 <scan_keypad+0xee>
 10c:	3e c0       	rjmp	.+124    	; 0x18a <scan_keypad+0x110>
					return 'A';
				else if (col == 5 && row == 0)
 10e:	65 30       	cpi	r22, 0x05	; 5
 110:	71 05       	cpc	r23, r1
 112:	61 f4       	brne	.+24     	; 0x12c <scan_keypad+0xb2>
 114:	ef 2b       	or	r30, r31
 116:	d9 f1       	breq	.+118    	; 0x18e <scan_keypad+0x114>
					return '4';
				else if (col == 5 && row == 1)
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	31 05       	cpc	r19, r1
 11c:	d1 f1       	breq	.+116    	; 0x192 <scan_keypad+0x118>
					return '5';
				else if (col == 5 && row == 2)
 11e:	22 30       	cpi	r18, 0x02	; 2
 120:	31 05       	cpc	r19, r1
 122:	c9 f1       	breq	.+114    	; 0x196 <scan_keypad+0x11c>
					return '6';
				else if (col == 5 && row == 3)
 124:	23 30       	cpi	r18, 0x03	; 3
 126:	31 05       	cpc	r19, r1
 128:	f9 f4       	brne	.+62     	; 0x168 <scan_keypad+0xee>
 12a:	37 c0       	rjmp	.+110    	; 0x19a <scan_keypad+0x120>
					return 'B';
				else if (col == 6 && row == 0)
 12c:	66 30       	cpi	r22, 0x06	; 6
 12e:	71 05       	cpc	r23, r1
 130:	61 f4       	brne	.+24     	; 0x14a <scan_keypad+0xd0>
 132:	ef 2b       	or	r30, r31
 134:	a1 f1       	breq	.+104    	; 0x19e <scan_keypad+0x124>
					return '7';
				else if (col == 6 && row == 1)
 136:	21 30       	cpi	r18, 0x01	; 1
 138:	31 05       	cpc	r19, r1
 13a:	99 f1       	breq	.+102    	; 0x1a2 <scan_keypad+0x128>
					return '8';
				else if (col == 6 && row == 2)
 13c:	22 30       	cpi	r18, 0x02	; 2
 13e:	31 05       	cpc	r19, r1
 140:	91 f1       	breq	.+100    	; 0x1a6 <scan_keypad+0x12c>
					return '9';
				else if (col == 6 && row == 3)
 142:	23 30       	cpi	r18, 0x03	; 3
 144:	31 05       	cpc	r19, r1
 146:	81 f4       	brne	.+32     	; 0x168 <scan_keypad+0xee>
 148:	30 c0       	rjmp	.+96     	; 0x1aa <scan_keypad+0x130>
					return 'C';
				else if (col == 7 && row == 0)
 14a:	67 30       	cpi	r22, 0x07	; 7
 14c:	71 05       	cpc	r23, r1
 14e:	61 f4       	brne	.+24     	; 0x168 <scan_keypad+0xee>
 150:	ef 2b       	or	r30, r31
 152:	69 f1       	breq	.+90     	; 0x1ae <scan_keypad+0x134>
					return '*';
				else if (col == 7 && row == 1)
 154:	21 30       	cpi	r18, 0x01	; 1
 156:	31 05       	cpc	r19, r1
 158:	61 f1       	breq	.+88     	; 0x1b2 <scan_keypad+0x138>
					return '0';
				else if (col == 7 && row == 2)
 15a:	22 30       	cpi	r18, 0x02	; 2
 15c:	31 05       	cpc	r19, r1
 15e:	59 f1       	breq	.+86     	; 0x1b6 <scan_keypad+0x13c>
					return '#';
				else if (col == 7 && row == 3)
 160:	23 30       	cpi	r18, 0x03	; 3
 162:	31 05       	cpc	r19, r1
 164:	61 f5       	brne	.+88     	; 0x1be <scan_keypad+0x144>
 166:	29 c0       	rjmp	.+82     	; 0x1ba <scan_keypad+0x140>
	
	for (int col = 4; col < 8; col++)
	{
		PORTD |= 0xFF;		//reset
		PORTD &= ~(1<<col);		//sets specific PORTD/PIN(col) to 0 and everything else 1.
		for (int row = 0; row < 4; row++) 
 168:	44 30       	cpi	r20, 0x04	; 4
 16a:	51 05       	cpc	r21, r1
 16c:	0c f4       	brge	.+2      	; 0x170 <scan_keypad+0xf6>
 16e:	a4 cf       	rjmp	.-184    	; 0xb8 <scan_keypad+0x3e>
void USART_Transmit(unsigned char ch);

char scan_keypad()
{
	
	for (int col = 4; col < 8; col++)
 170:	6f 5f       	subi	r22, 0xFF	; 255
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	71 05       	cpc	r23, r1
 178:	09 f0       	breq	.+2      	; 0x17c <scan_keypad+0x102>
 17a:	8c cf       	rjmp	.-232    	; 0x94 <scan_keypad+0x1a>
 17c:	25 c0       	rjmp	.+74     	; 0x1c8 <scan_keypad+0x14e>
		{
			PORTB |= 0x0F;		//reset
			if (!(PINB & (1<<row)) && !(PIND & (1<<col)))	//checks for 0's for the row and col
			{
				if (col == 4 && row == 0)
					return '1';
 17e:	81 e3       	ldi	r24, 0x31	; 49
 180:	23 c0       	rjmp	.+70     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 4 && row == 1)
					return '2';
 182:	82 e3       	ldi	r24, 0x32	; 50
 184:	21 c0       	rjmp	.+66     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 4 && row == 2)
					return '3';
 186:	83 e3       	ldi	r24, 0x33	; 51
 188:	1f c0       	rjmp	.+62     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 4 && row == 3)
					return 'A';
 18a:	81 e4       	ldi	r24, 0x41	; 65
 18c:	1d c0       	rjmp	.+58     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 5 && row == 0)
					return '4';
 18e:	84 e3       	ldi	r24, 0x34	; 52
 190:	1b c0       	rjmp	.+54     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 5 && row == 1)
					return '5';
 192:	85 e3       	ldi	r24, 0x35	; 53
 194:	19 c0       	rjmp	.+50     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 5 && row == 2)
					return '6';
 196:	86 e3       	ldi	r24, 0x36	; 54
 198:	17 c0       	rjmp	.+46     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 5 && row == 3)
					return 'B';
 19a:	82 e4       	ldi	r24, 0x42	; 66
 19c:	15 c0       	rjmp	.+42     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 6 && row == 0)
					return '7';
 19e:	87 e3       	ldi	r24, 0x37	; 55
 1a0:	13 c0       	rjmp	.+38     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 6 && row == 1)
					return '8';
 1a2:	88 e3       	ldi	r24, 0x38	; 56
 1a4:	11 c0       	rjmp	.+34     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 6 && row == 2)
					return '9';
 1a6:	89 e3       	ldi	r24, 0x39	; 57
 1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 6 && row == 3)
					return 'C';
 1aa:	83 e4       	ldi	r24, 0x43	; 67
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 7 && row == 0)
					return '*';
 1ae:	8a e2       	ldi	r24, 0x2A	; 42
 1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 7 && row == 1)
					return '0';
 1b2:	80 e3       	ldi	r24, 0x30	; 48
 1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 7 && row == 2)
					return '#';
 1b6:	83 e2       	ldi	r24, 0x23	; 35
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <scan_keypad+0x14e>
				else if (col == 7 && row == 3)
					return 'D';
 1ba:	84 e4       	ldi	r24, 0x44	; 68
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <scan_keypad+0x14e>
	
	for (int col = 4; col < 8; col++)
	{
		PORTD |= 0xFF;		//reset
		PORTD &= ~(1<<col);		//sets specific PORTD/PIN(col) to 0 and everything else 1.
		for (int row = 0; row < 4; row++) 
 1be:	44 30       	cpi	r20, 0x04	; 4
 1c0:	51 05       	cpc	r21, r1
 1c2:	0c f4       	brge	.+2      	; 0x1c6 <scan_keypad+0x14c>
 1c4:	79 cf       	rjmp	.-270    	; 0xb8 <scan_keypad+0x3e>
 1c6:	da cf       	rjmp	.-76     	; 0x17c <scan_keypad+0x102>
				else if (col == 7 && row == 3)
					return 'D';
			}
		}	
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	08 95       	ret

000001d4 <USART_Init>:

void USART_Init(unsigned int ubrr)
{
	/*baud rate*/
	UBRR0H = (uint8_t)(ubrr>>8);
 1d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)ubrr;
 1d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/*receiver and transmitter*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1dc:	88 e1       	ldi	r24, 0x18	; 24
 1de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/*frame format: 8data, 2stop bit*/
	UCSR0C = (3<<UCSZ00);
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1e8:	08 95       	ret

000001ea <USART_Transmit>:
}
void USART_Transmit(unsigned char ch)
{
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 1ea:	e0 ec       	ldi	r30, 0xC0	; 192
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	90 81       	ld	r25, Z
 1f0:	95 ff       	sbrs	r25, 5
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <USART_Transmit+0x4>
	
	UDR0 = ch;          //This returns the char to the string
 1f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1f8:	08 95       	ret

000001fa <main>:
	
}
void main()
{
	DDRB |= 0x00;
 1fa:	84 b1       	in	r24, 0x04	; 4
 1fc:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0xF0;
 1fe:	8a b1       	in	r24, 0x0a	; 10
 200:	80 6f       	ori	r24, 0xF0	; 240
 202:	8a b9       	out	0x0a, r24	; 10
	PORTB |= 0x0F;	//Low nibble
 204:	85 b1       	in	r24, 0x05	; 5
 206:	8f 60       	ori	r24, 0x0F	; 15
 208:	85 b9       	out	0x05, r24	; 5
	PORTD |= 0xF0;	//High nibble
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	80 6f       	ori	r24, 0xF0	; 240
 20e:	8b b9       	out	0x0b, r24	; 11
	char key;
	USART_Init(MYUBRR);
 210:	87 e6       	ldi	r24, 0x67	; 103
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	df df       	rcall	.-66     	; 0x1d4 <USART_Init>
	while(1)
	{
		
		key = scan_keypad();
 216:	31 df       	rcall	.-414    	; 0x7a <scan_keypad>
		USART_Transmit(key);
 218:	e8 df       	rcall	.-48     	; 0x1ea <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	2f e9       	ldi	r18, 0x9F	; 159
 21c:	86 e8       	ldi	r24, 0x86	; 134
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x26>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x30>
 22a:	00 00       	nop
 22c:	f4 cf       	rjmp	.-24     	; 0x216 <main+0x1c>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
