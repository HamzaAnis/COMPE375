
Lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000177  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000131  00000000  00000000  00000587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fc82  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000273  00000000  00000000  00010b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000687  00000000  00000000  00010de5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__vector_3>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	37 c0       	rjmp	.+110    	; 0xa8 <__vector_14>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	1f d1       	rcall	.+574    	; 0x2c4 <main>
  86:	2f c1       	rjmp	.+606    	; 0x2e6 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <__vector_3>:

char scan_keypad(); 
void milliS_timer1(uint8_t milliS);
void PWM_INIT();
	
ISR(PCINT0_vect) {
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
	if (ISR_TOGGLE) {		//if button pressed
  94:	1f 99       	sbic	0x03, 7	; 3
  96:	02 c0       	rjmp	.+4      	; 0x9c <__vector_3+0x12>
		ISR_ON;
  98:	1d 9a       	sbi	0x03, 5	; 3
  9a:	01 c0       	rjmp	.+2      	; 0x9e <__vector_3+0x14>
	}
	else {
		ISR_OFF;
  9c:	1d 98       	cbi	0x03, 5	; 3
	}
}
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	5f 92       	push	r5
  b4:	6f 92       	push	r6
  b6:	7f 92       	push	r7
  b8:	8f 92       	push	r8
  ba:	9f 92       	push	r9
  bc:	af 92       	push	r10
  be:	bf 92       	push	r11
  c0:	cf 92       	push	r12
  c2:	df 92       	push	r13
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	uint16_t sendKey;
	for (int col = 4; col < 7; col++)
  e8:	64 e0       	ldi	r22, 0x04	; 4
  ea:	70 e0       	ldi	r23, 0x00	; 0
	{
		PORTD |= 0xFF;		//reset
  ec:	ff 24       	eor	r15, r15
  ee:	fa 94       	dec	r15
		PORTD &= ~(1<<col);		//sets specific PORTD/PIN(col) to 0 and everything else 1.
  f0:	c1 e0       	ldi	r28, 0x01	; 1
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	10 e0       	ldi	r17, 0x00	; 0
				else if (col == 5 && row == 1)
				sendKey = 5;
				else if (col == 5 && row == 2)
				sendKey = 6;
				else if (col == 6 && row == 0)
				sendKey = 7;
  f8:	0f 2e       	mov	r0, r31
  fa:	f7 e0       	ldi	r31, 0x07	; 7
  fc:	5f 2e       	mov	r5, r31
  fe:	f0 2d       	mov	r31, r0
				else if (col == 6 && row == 1)
				sendKey = 8;
 100:	68 94       	set
 102:	66 24       	eor	r6, r6
 104:	63 f8       	bld	r6, 3
				else if (col == 6 && row == 2)
				sendKey = 9;
 106:	0f 2e       	mov	r0, r31
 108:	f9 e0       	ldi	r31, 0x09	; 9
 10a:	7f 2e       	mov	r7, r31
 10c:	f0 2d       	mov	r31, r0
				else if (col == 4 && row == 1)
				sendKey = 2;
				else if (col == 4 && row == 2)
				sendKey = 3;
				else if (col == 5 && row == 0)
				sendKey = 4;
 10e:	68 94       	set
 110:	88 24       	eor	r8, r8
 112:	82 f8       	bld	r8, 2
				else if (col == 5 && row == 1)
				sendKey = 5;
 114:	0f 2e       	mov	r0, r31
 116:	f5 e0       	ldi	r31, 0x05	; 5
 118:	9f 2e       	mov	r9, r31
 11a:	f0 2d       	mov	r31, r0
				else if (col == 5 && row == 2)
				sendKey = 6;
 11c:	0f 2e       	mov	r0, r31
 11e:	f6 e0       	ldi	r31, 0x06	; 6
 120:	af 2e       	mov	r10, r31
 122:	f0 2d       	mov	r31, r0
		{
			PORTB |= 0x0F;		//reset
			if (!(PINB & (1<<row)) && !(PIND & (1<<col)))	//checks for 0's for the row and col
			{
				if (col == 4 && row == 0)
				sendKey = 1;
 124:	bb 24       	eor	r11, r11
 126:	b3 94       	inc	r11
				else if (col == 4 && row == 1)
				sendKey = 2;
 128:	68 94       	set
 12a:	cc 24       	eor	r12, r12
 12c:	c1 f8       	bld	r12, 1
				else if (col == 4 && row == 2)
				sendKey = 3;
 12e:	0f 2e       	mov	r0, r31
 130:	f3 e0       	ldi	r31, 0x03	; 3
 132:	df 2e       	mov	r13, r31
 134:	f0 2d       	mov	r31, r0
ISR(TIMER0_COMPA_vect)
{
	uint16_t sendKey;
	for (int col = 4; col < 7; col++)
	{
		PORTD |= 0xFF;		//reset
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	fb b8       	out	0x0b, r15	; 11
		PORTD &= ~(1<<col);		//sets specific PORTD/PIN(col) to 0 and everything else 1.
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	fe 01       	movw	r30, r28
 13e:	06 2e       	mov	r0, r22
 140:	02 c0       	rjmp	.+4      	; 0x146 <__vector_14+0x9e>
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <__vector_14+0x9a>
 14a:	9e 2f       	mov	r25, r30
 14c:	90 95       	com	r25
 14e:	89 23       	and	r24, r25
 150:	8b b9       	out	0x0b, r24	; 11
 152:	ae 01       	movw	r20, r28
 154:	20 2f       	mov	r18, r16
 156:	31 2f       	mov	r19, r17
 158:	04 c0       	rjmp	.+8      	; 0x162 <__vector_14+0xba>
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	4f 5f       	subi	r20, 0xFF	; 255
 160:	5f 4f       	sbci	r21, 0xFF	; 255
 162:	d9 01       	movw	r26, r18
		for (int row = 0; row < 3; row++)
		{
			PORTB |= 0x0F;		//reset
 164:	85 b1       	in	r24, 0x05	; 5
 166:	8f 60       	ori	r24, 0x0F	; 15
 168:	85 b9       	out	0x05, r24	; 5
			if (!(PINB & (1<<row)) && !(PIND & (1<<col)))	//checks for 0's for the row and col
 16a:	83 b1       	in	r24, 0x03	; 3
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 2e       	mov	r0, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <__vector_14+0xce>
 172:	95 95       	asr	r25
 174:	87 95       	ror	r24
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <__vector_14+0xca>
 17a:	80 fd       	sbrc	r24, 0
 17c:	29 c0       	rjmp	.+82     	; 0x1d0 <__vector_14+0x128>
 17e:	89 b1       	in	r24, 0x09	; 9
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	8e 23       	and	r24, r30
 184:	9f 23       	and	r25, r31
 186:	89 2b       	or	r24, r25
 188:	19 f5       	brne	.+70     	; 0x1d0 <__vector_14+0x128>
			{
				if (col == 4 && row == 0)
 18a:	64 30       	cpi	r22, 0x04	; 4
 18c:	71 05       	cpc	r23, r1
 18e:	49 f4       	brne	.+18     	; 0x1a2 <__vector_14+0xfa>
 190:	ab 2b       	or	r26, r27
 192:	81 f1       	breq	.+96     	; 0x1f4 <__vector_14+0x14c>
				sendKey = 1;
				else if (col == 4 && row == 1)
 194:	21 30       	cpi	r18, 0x01	; 1
 196:	31 05       	cpc	r19, r1
 198:	79 f1       	breq	.+94     	; 0x1f8 <__vector_14+0x150>
				sendKey = 2;
				else if (col == 4 && row == 2)
 19a:	22 30       	cpi	r18, 0x02	; 2
 19c:	31 05       	cpc	r19, r1
 19e:	c1 f4       	brne	.+48     	; 0x1d0 <__vector_14+0x128>
 1a0:	35 c0       	rjmp	.+106    	; 0x20c <__vector_14+0x164>
				sendKey = 3;
				else if (col == 5 && row == 0)
 1a2:	65 30       	cpi	r22, 0x05	; 5
 1a4:	71 05       	cpc	r23, r1
 1a6:	49 f4       	brne	.+18     	; 0x1ba <__vector_14+0x112>
 1a8:	ab 2b       	or	r26, r27
 1aa:	41 f1       	breq	.+80     	; 0x1fc <__vector_14+0x154>
				sendKey = 4;
				else if (col == 5 && row == 1)
 1ac:	21 30       	cpi	r18, 0x01	; 1
 1ae:	31 05       	cpc	r19, r1
 1b0:	39 f1       	breq	.+78     	; 0x200 <__vector_14+0x158>
				sendKey = 5;
				else if (col == 5 && row == 2)
 1b2:	22 30       	cpi	r18, 0x02	; 2
 1b4:	31 05       	cpc	r19, r1
 1b6:	61 f4       	brne	.+24     	; 0x1d0 <__vector_14+0x128>
 1b8:	2b c0       	rjmp	.+86     	; 0x210 <__vector_14+0x168>
				sendKey = 6;
				else if (col == 6 && row == 0)
 1ba:	66 30       	cpi	r22, 0x06	; 6
 1bc:	71 05       	cpc	r23, r1
 1be:	41 f4       	brne	.+16     	; 0x1d0 <__vector_14+0x128>
 1c0:	ab 2b       	or	r26, r27
 1c2:	01 f1       	breq	.+64     	; 0x204 <__vector_14+0x15c>
				sendKey = 7;
				else if (col == 6 && row == 1)
 1c4:	21 30       	cpi	r18, 0x01	; 1
 1c6:	31 05       	cpc	r19, r1
 1c8:	f9 f0       	breq	.+62     	; 0x208 <__vector_14+0x160>
				sendKey = 8;
				else if (col == 6 && row == 2)
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	11 f1       	breq	.+68     	; 0x214 <__vector_14+0x16c>
	uint16_t sendKey;
	for (int col = 4; col < 7; col++)
	{
		PORTD |= 0xFF;		//reset
		PORTD &= ~(1<<col);		//sets specific PORTD/PIN(col) to 0 and everything else 1.
		for (int row = 0; row < 3; row++)
 1d0:	43 30       	cpi	r20, 0x03	; 3
 1d2:	51 05       	cpc	r21, r1
 1d4:	14 f2       	brlt	.-124    	; 0x15a <__vector_14+0xb2>
				sendKey = 8;
				else if (col == 6 && row == 2)
				sendKey = 9;
			}
		}
		duty_cycle = sendKey * 10;
 1d6:	9e 2d       	mov	r25, r14
 1d8:	99 0f       	add	r25, r25
 1da:	89 2f       	mov	r24, r25
 1dc:	88 0f       	add	r24, r24
 1de:	88 0f       	add	r24, r24
 1e0:	89 0f       	add	r24, r25
 1e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
ISR(TIMER0_COMPA_vect)
{
	uint16_t sendKey;
	for (int col = 4; col < 7; col++)
 1e6:	6f 5f       	subi	r22, 0xFF	; 255
 1e8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ea:	67 30       	cpi	r22, 0x07	; 7
 1ec:	71 05       	cpc	r23, r1
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <__vector_14+0x14a>
 1f0:	a2 cf       	rjmp	.-188    	; 0x136 <__vector_14+0x8e>
 1f2:	12 c0       	rjmp	.+36     	; 0x218 <__vector_14+0x170>
		{
			PORTB |= 0x0F;		//reset
			if (!(PINB & (1<<row)) && !(PIND & (1<<col)))	//checks for 0's for the row and col
			{
				if (col == 4 && row == 0)
				sendKey = 1;
 1f4:	eb 2c       	mov	r14, r11
 1f6:	b1 cf       	rjmp	.-158    	; 0x15a <__vector_14+0xb2>
				else if (col == 4 && row == 1)
				sendKey = 2;
 1f8:	ec 2c       	mov	r14, r12
 1fa:	af cf       	rjmp	.-162    	; 0x15a <__vector_14+0xb2>
				else if (col == 4 && row == 2)
				sendKey = 3;
				else if (col == 5 && row == 0)
				sendKey = 4;
 1fc:	e8 2c       	mov	r14, r8
 1fe:	ad cf       	rjmp	.-166    	; 0x15a <__vector_14+0xb2>
				else if (col == 5 && row == 1)
				sendKey = 5;
 200:	e9 2c       	mov	r14, r9
 202:	ab cf       	rjmp	.-170    	; 0x15a <__vector_14+0xb2>
				else if (col == 5 && row == 2)
				sendKey = 6;
				else if (col == 6 && row == 0)
				sendKey = 7;
 204:	e5 2c       	mov	r14, r5
 206:	a9 cf       	rjmp	.-174    	; 0x15a <__vector_14+0xb2>
				else if (col == 6 && row == 1)
				sendKey = 8;
 208:	e6 2c       	mov	r14, r6
 20a:	a7 cf       	rjmp	.-178    	; 0x15a <__vector_14+0xb2>
				if (col == 4 && row == 0)
				sendKey = 1;
				else if (col == 4 && row == 1)
				sendKey = 2;
				else if (col == 4 && row == 2)
				sendKey = 3;
 20c:	ed 2c       	mov	r14, r13
 20e:	e3 cf       	rjmp	.-58     	; 0x1d6 <__vector_14+0x12e>
				else if (col == 5 && row == 0)
				sendKey = 4;
				else if (col == 5 && row == 1)
				sendKey = 5;
				else if (col == 5 && row == 2)
				sendKey = 6;
 210:	ea 2c       	mov	r14, r10
 212:	e1 cf       	rjmp	.-62     	; 0x1d6 <__vector_14+0x12e>
				else if (col == 6 && row == 0)
				sendKey = 7;
				else if (col == 6 && row == 1)
				sendKey = 8;
				else if (col == 6 && row == 2)
				sendKey = 9;
 214:	e7 2c       	mov	r14, r7
 216:	df cf       	rjmp	.-66     	; 0x1d6 <__vector_14+0x12e>
			}
		}
		duty_cycle = sendKey * 10;
	}
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	bf 90       	pop	r11
 242:	af 90       	pop	r10
 244:	9f 90       	pop	r9
 246:	8f 90       	pop	r8
 248:	7f 90       	pop	r7
 24a:	6f 90       	pop	r6
 24c:	5f 90       	pop	r5
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <milliS_timer1>:
	PWM_INIT();
	}
}
void milliS_timer1(uint8_t milliS)
{
	TCCR0A |= (1<<WGM01);
 258:	94 b5       	in	r25, 0x24	; 36
 25a:	92 60       	ori	r25, 0x02	; 2
 25c:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);
 25e:	95 b5       	in	r25, 0x25	; 37
 260:	95 60       	ori	r25, 0x05	; 5
 262:	95 bd       	out	0x25, r25	; 37
	OCR0A = milliS * 7, 8125 - 1;
 264:	98 2f       	mov	r25, r24
 266:	99 0f       	add	r25, r25
 268:	99 0f       	add	r25, r25
 26a:	99 0f       	add	r25, r25
 26c:	98 1b       	sub	r25, r24
 26e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 276:	08 95       	ret

00000278 <PWM_INIT>:
}
void PWM_INIT()
{
	TCCR1A|= (1<<WGM11) | (1<<COM1B1) | (1<COM1A1); 
 278:	e0 e8       	ldi	r30, 0x80	; 128
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	83 62       	ori	r24, 0x23	; 35
 280:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10) | (1<<CS11) |(1<<WGM12) |(1<<WGM13);
 282:	e1 e8       	ldi	r30, 0x81	; 129
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	8b 61       	ori	r24, 0x1B	; 27
 28a:	80 83       	st	Z, r24
	DDRB |= (1<DDB1);
 28c:	84 b1       	in	r24, 0x04	; 4
 28e:	84 b9       	out	0x04, r24	; 4
	ICR1 = ((F_CPU/64) *(Z*0.01) -1);
 290:	84 e4       	ldi	r24, 0x44	; 68
 292:	94 e0       	ldi	r25, 0x04	; 4
 294:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 298:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = (duty_cycle/100 * PWM_FREQ);  // 1/10 of duty cycle
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2a0:	99 e2       	ldi	r25, 0x29	; 41
 2a2:	89 9f       	mul	r24, r25
 2a4:	81 2d       	mov	r24, r1
 2a6:	11 24       	eor	r1, r1
 2a8:	82 95       	swap	r24
 2aa:	8f 70       	andi	r24, 0x0F	; 15
 2ac:	40 e2       	ldi	r20, 0x20	; 32
 2ae:	53 e0       	ldi	r21, 0x03	; 3
 2b0:	84 9f       	mul	r24, r20
 2b2:	90 01       	movw	r18, r0
 2b4:	85 9f       	mul	r24, r21
 2b6:	30 0d       	add	r19, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2be:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2c2:	08 95       	ret

000002c4 <main>:
		duty_cycle = sendKey * 10;
	}
}
int main (void)
{
	DDRB |= (1<<DDB5);
 2c4:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= ~(1<<DDB7);
 2c6:	27 98       	cbi	0x04, 7	; 4
	PCMSK0 |= (1<<PCINT7);
 2c8:	eb e6       	ldi	r30, 0x6B	; 107
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0); 
 2d2:	e8 e6       	ldi	r30, 0x68	; 104
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	80 83       	st	Z, r24
	
	sei();
 2dc:	78 94       	sei
	while (1) {
	milliS_timer1(X);
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	bb df       	rcall	.-138    	; 0x258 <milliS_timer1>
	PWM_INIT();
 2e2:	ca df       	rcall	.-108    	; 0x278 <PWM_INIT>
	}
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <main+0x1a>

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
