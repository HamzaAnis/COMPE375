
Lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000177  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000d4  00000000  00000000  00000483  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036d  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006aee  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000172  00000000  00000000  000074ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000762c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000000a8  00000000  00000000  00007674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	83 c0       	rjmp	.+262    	; 0x134 <__vector_11>
  2e:	00 00       	nop
  30:	8c c0       	rjmp	.+280    	; 0x14a <__vector_12>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	93 c0       	rjmp	.+294    	; 0x160 <__vector_14>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	55 c0       	rjmp	.+170    	; 0x100 <__vector_21>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	25 d0       	rcall	.+74     	; 0xd0 <main>
  86:	a2 c0       	rjmp	.+324    	; 0x1cc <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <timer0_init>:



void timer0_init()		//X ms
{
	TCCR0B |= (1 << WGM02) | (1 << CS02) | (1 << CS00);	//Set up timer with prescaler = 1024 and CTC Mode
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	8d 60       	ori	r24, 0x0D	; 13
  8e:	85 bd       	out	0x25, r24	; 37
	
	TCNT0 = 0;	//Initialize Counter
  90:	16 bc       	out	0x26, r1	; 38
	
	OCR0A = 139;		//9 ms  ((16MHz/1024)*(9ms))-1
  92:	8b e8       	ldi	r24, 0x8B	; 139
  94:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE1A);	//Enable Compare A
  96:	ee e6       	ldi	r30, 0x6E	; 110
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
	sei();
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <timer1_init>:
	
	
}
void timer1_init()	//Z frequency
{
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);	//Set up timer with prescaler = 64 and CTC Mode
  a4:	e1 e8       	ldi	r30, 0x81	; 129
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8b 60       	ori	r24, 0x0B	; 11
  ac:	80 83       	st	Z, r24
	
	TCNT1 = 0;	//Initialize Counter
  ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	OCR1A = 276;	//Will change the top to 900Hz frequency  (16MHz/(64*900))-1
  b6:	84 e1       	ldi	r24, 0x14	; 20
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TIMSK1 |= (1 << OCIE1A)| (1<< OCIE1B) ; //Enable Compare A and B
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	80 83       	st	Z, r24
	
	sei();
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <main>:
uint16_t duty;
int adc_start = 0;

int main(void)
{
	DDRB |= (1<<DDB5);	// Output for Z Frequency
  d0:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= (1 << DDB4);	// Output for Xms
  d2:	24 9a       	sbi	0x04, 4	; 4
	timer1_init();	// Timer for PWM
  d4:	e7 df       	rcall	.-50     	; 0xa4 <timer1_init>
	timer0_init();	// Timer for Xms
  d6:	d9 df       	rcall	.-78     	; 0x8a <timer0_init>
	
	while(1)
	{
		OCR1B = duty;
  d8:	ea e8       	ldi	r30, 0x8A	; 138
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <duty>
  e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <duty+0x1>
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	80 83       	st	Z, r24
	}
  e8:	f9 cf       	rjmp	.-14     	; 0xdc <main+0xc>

000000ea <ADC_init>:
	sei();
	
}
void ADC_init(void)
{
	ADMUX |= (1 << REFS0) | (1 << MUX0) | (1 << MUX1) | (1 << MUX2);
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	87 64       	ori	r24, 0x47	; 71
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 <<ADATE) | (1 << ADIE) | (1 << ADPS2) | ( 1 << ADPS1);
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8e 6e       	ori	r24, 0xEE	; 238
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <__vector_21>:
}

ISR(ADC_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	duty = ADC;
 10e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 112:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 116:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <duty+0x1>
 11a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <duty>
	OCR1B = duty;
 11e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 122:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
	LightOn;		//PortB5 (LED light on)
 13e:	2d 9a       	sbi	0x05, 5	; 5
}
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_12>:
ISR(TIMER1_COMPB_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
	LightOff;		//PortB5 (LED light off)
 154:	2d 98       	cbi	0x05, 5	; 5
}
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	if(adc_start == 0)
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 186:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 18a:	89 2b       	or	r24, r25
 18c:	51 f4       	brne	.+20     	; 0x1a2 <__vector_14+0x42>
	{
		ADC_init();
 18e:	ad df       	rcall	.-166    	; 0xea <ADC_init>
		adc_start++;
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 194:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	
	PORTB ^= (1<<PORTB5);		//Toggle LED
 1a2:	95 b1       	in	r25, 0x05	; 5
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	89 27       	eor	r24, r25
 1a8:	85 b9       	out	0x05, r24	; 5
	
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
